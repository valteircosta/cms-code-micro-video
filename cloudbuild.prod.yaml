# Este arquivo será lido pelo Google Cloud Plataform - GCP
steps:
  - id: "Rodando geração do encrypt do json"
    name: 'gcr.io/cloud-builders/gcloud'
    args:
      - kms
      - decrypt
      - --ciphertext-file=./storage/credentials/google/service-account-storage.json.enc
      - --plaintext-file=./storage/credentials/google/service-account-storage.json
      - --location=global
      - --keyring=test-lesson-vcs
      - --key=service-account-vcs

  - id: "Rodando docker-compose"
    # Informa a imagem do docker cloufbuilder que sera usada
    name: "gcr.io/$PROJECT_ID/docker-compose:1.24.0"
    # Passa os argumentos para execução do docker
    # -f -> vai inforar nome do arquivo docker-compos.yaml
    # docker-compose-cloudbuild.yam -> nome do arquivo
    # up -> comando para subir container
    # -d -> container em modo daemon
    args: ["-f", "docker-compose-prod.yaml", "up", "-d"]
    env:
      - GOOGLE_CLOUD_PROJECT_ID=$PROJECT_ID
      - GOOGLE_CLOUD_KEY_FILE=service-account-storage.json
      - GOOGLE_CLOUD_STORAGE_BUCKET=code-micro-service-vcs
      - GOOGLE_CLOUD_STORAGE_API_URI=https://storage.cloud.google.com/code-micro-service-vcs
      - TESTING_PROD=true
    # Change owner of the files, setting for www-data
  # - id: "Rodando Chown in /var/www"
  #   name: 'gcr.io/cloud-builders/docker'
  #   args: ['exec','-u','root','-t','app','chown','-R','www-data:www-data','/var/www']


  - id: "Rodando docker ps"
    # Informa o comando que será executado.
    # Atenção para para o nome da imagem utilizada
    name: "gcr.io/cloud-builders/docker"
    # Passa os argumentos para execução do docker
    args: ["ps"]

  - id: "Rodando composer"
    # Arquitetura de um comando usado
    # Informa a imagem do docker que sera usada
    name: "gcr.io/cloud-builders/docker"
    # args => Informa comandos e argumentos para execução
    # "exec" comando exec
    # "-t"   opção para alocar um terminal tty para execução
    # "app"  nome do containner que no qual será executado
    # "composer" chama o php composer
    # "install" opção install do composer
    args: ["exec", "-t", "app", "composer", "install"]

  - id: "Copiando arquivo .env"
    name: "gcr.io/cloud-builders/docker"
    args: ["exec", "-t", "app", "cp", ".env.example", ".env"]

  - id: "Rodando key:generate"
    name: "gcr.io/cloud-builders/docker"
    args: ["exec", "-t", "app", "php", "/var/www/artisan", "key:generate"]

  - id: "Rodando migrate e artisan"
    name: "gcr.io/cloud-builders/docker"
    args: ["exec", "-t", "app", "php", "/var/www/artisan", "migrate"]

  - id: "Rodando PhpUnit"
    name: "gcr.io/cloud-builders/docker"
    args:
      [
        "exec",
        "-t",
        "app",
        "php",
        "/var/www/vendor/bin/phpunit",
        "-c",
        "/var/www/phpunit.xml",
      ]

  - id: "Build image from Dockerfile.prod"
    name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "gcr.io/$PROJECT_ID/app-laravel:$SHORT_SHA",
        "-f",
        "Dockerfile.prod",
        ".",
      ]

  - id: "Pushing image from Dockerfile.prod"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/app-laravel:$SHORT_SHA"]

  - id: "Adjusting deployment file k8s"
    name: "gcr.io/cloud-builders/gcloud"
    # adicionado para poder rodar comando
    entrypoint: "/bin/sh"
    # roda comandos
    args:
      - "-c"
      - |
        sed "s#img-app-deployment#gcr.io/$PROJECT_ID/app-laravel:$SHORT_SHA#g" k8s/app/deployment.yaml > k8s/app/deployment-new.yaml;
        cat k8s/app/deployment-new.yaml;

  - id: "Deployng k8s"
    name: "gcr.io/cloud-builders/kubectl"
    # roda comandos
    args:
      - "apply"
      - "-f"
      - "k8s/app/deployment-new.yaml"
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-c"
      - "CLOUDSDK_CONTAINER_CLUSTER=cluster-docker-laravel"
